// I don't think I should do this - should use getMonaco
// import { languages } from 'monaco-editor';

// // TODO: this plus fetch completions
// function createDependencyProposals(range) {
//   const suggestions: languages.CompletionItem[] = [
//     {
//       label: 'Debug',
//       insertText: ['System.debug($0);'].join('\n'),
//       documentation: 'System.debug',
//       kind: languages.CompletionItemKind.Function,
//       insertTextRules: languages.CompletionItemInsertTextRule.InsertAsSnippet,
//       range,
//     },
//     {
//       label: 'for',
//       insertText: ['for (${1:variable} : ${2:List_or_set}) {', '\t$0', '}'].join('\n'),
//       documentation: 'for loop',
//       kind: languages.CompletionItemKind.Snippet,
//       insertTextRules: languages.CompletionItemInsertTextRule.InsertAsSnippet,
//       range,
//     },
//     {
//       label: 'for soql',
//       insertText: ['for (${1:SObject} ${2:variable} : [SELECT Id FROM ${1:SObject}]) {', '\t$0', '}'].join('\n'),
//       documentation: 'for loop',
//       kind: languages.CompletionItemKind.Snippet,
//       insertTextRules: languages.CompletionItemInsertTextRule.InsertAsSnippet,
//       range,
//     },
//     {
//       label: 'if',
//       insertText: ['if (${1:condition}) {', '\t$0', '}'].join('\n'),
//       documentation: 'if statement',
//       kind: languages.CompletionItemKind.Snippet,
//       insertTextRules: languages.CompletionItemInsertTextRule.InsertAsSnippet,
//       range,
//     },
//     {
//       label: 'Try catch',
//       insertText: ['try {', '\t$1', '} catch (${2:Exception}) {', '\t$0', '}'].join('\n'),
//       documentation: 'try catch',
//       kind: languages.CompletionItemKind.Snippet,
//       insertTextRules: languages.CompletionItemInsertTextRule.InsertAsSnippet,
//       range,
//     },
//     {
//       label: 'Try catch finally',
//       insertText: ['try {', '\t$1', '} catch (${2:Exception}) {', '\t$3', '} finally {', '\t$0', '}'].join('\n'),
//       documentation: 'try catch finally',
//       kind: languages.CompletionItemKind.Snippet,
//       insertTextRules: languages.CompletionItemInsertTextRule.InsertAsSnippet,
//       range,
//     },
//     {
//       label: 'switch',
//       insertText: ['switch on ${1:switch_on} {', '\twhen $2 {', '\t\t$3', '\t}', '\twhen else {', '\t\t$0', '\t}', '}'].join('\n'),
//       documentation: 'switch statement',
//       kind: languages.CompletionItemKind.Snippet,
//       insertTextRules: languages.CompletionItemInsertTextRule.InsertAsSnippet,
//       range,
//     },
//     {
//       label: 'throw',
//       insertText: ['throw new ${1:Exception}($0);'].join('\n'),
//       documentation: 'Throw a new exception',
//       kind: languages.CompletionItemKind.Snippet,
//       insertTextRules: languages.CompletionItemInsertTextRule.InsertAsSnippet,
//       range,
//     },
//     {
//       label: 'List',
//       insertText: ['List<${1:Object}> ${2:listName} = new List<$1>();'].join('\n'),
//       documentation: 'new list',
//       kind: languages.CompletionItemKind.Struct,
//       insertTextRules: languages.CompletionItemInsertTextRule.InsertAsSnippet,
//       range,
//     },
//     {
//       label: 'List From SOQL',
//       insertText: ['List<${1:Object}> ${2:listName} = [', '\tSELECT Id', '\tFROM ${1:Object}', '];'].join('\n'),
//       documentation: 'new list from SOQL',
//       kind: languages.CompletionItemKind.Struct,
//       insertTextRules: languages.CompletionItemInsertTextRule.InsertAsSnippet,
//       range,
//     },
//     {
//       label: 'new Map',
//       insertText: ['Map<${1:Type}, ${2:Type}> ${3:mapName} = new Map<$1, $2>();'].join('\n'),
//       documentation: 'new map',
//       kind: languages.CompletionItemKind.Struct,
//       insertTextRules: languages.CompletionItemInsertTextRule.InsertAsSnippet,
//       range,
//     },
//     {
//       label: 'new Map from SOQL',
//       insertText: ['Map<Id, ${1:Type}> ${2:mapName} = new Map<Id, $1>([', '\tSELECT Id', '\tFROM ${1}', ']);'].join('\n'),
//       documentation: 'new map from SOQL',
//       kind: languages.CompletionItemKind.Struct,
//       insertTextRules: languages.CompletionItemInsertTextRule.InsertAsSnippet,
//       range,
//     },
//     {
//       label: 'new Map from SObject list',
//       insertText: ['Map<Id, ${1:Type}> ${2:mapName} = new Map<Id, $1>(${2:variableName});'].join('\n'),
//       documentation: 'new map from SOQL',
//       kind: languages.CompletionItemKind.Struct,
//       insertTextRules: languages.CompletionItemInsertTextRule.InsertAsSnippet,
//       range,
//     },
//     {
//       label: 'new Set',
//       insertText: ['Set<${1:Object}> ${2:setName} = new Set<$1>();'].join('\n'),
//       documentation: 'new set',
//       kind: languages.CompletionItemKind.Struct,
//       insertTextRules: languages.CompletionItemInsertTextRule.InsertAsSnippet,
//       range,
//     },
//   ];
//   return suggestions;
// }
